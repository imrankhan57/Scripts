Minikube Setup on Linux

By default, Minikube historically used Docker as the container runtime, but it also supports others.

Today, Minikube can work with several runtimes:

Docker, containerd and CRI-O    -   Make sure one of these already installed (Use docker_install.sh script)

These instructions should be valid for Debian, Ubuntu, or Mint Linux distributions. Your experience may vary if using other distributions such as RHEL, Arch, non-desktop distributions like Ubuntu server, or lightweight distros which may omit many expected tools.
Install Minikube


In your terminal run the following:

curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

sudo install minikube-linux-amd64 /usr/local/bin/minikube
Starting Minikube and Testing Installation


After you have successfully installed Minikube we need to start and test the cluster to make sure everything is working correctly.

1. Add your user to the docker group

Note - If this step was performed when Docker was installed, it can be skipped.

In your terminal, run:

sudo usermod -aG docker $USER && newgrp docker

Log out of the user profile and log back in so these changes take effect. If running inside a VM, you will need to restart the entire machine, not just log out.

2. Start with the default driver:

In your terminal, run:

minikube start

Your output should look similar to this:

2. Check Minikube Status

After you see a Done! message in your terminal, run minikube status to make sure the cluster is healthy. Pay particular attention that the apiserver is in a "Running" state.

3. Install kubectl

In your terminal run the following:

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

4. Test kubectl

Lastly, open up your terminal and make sure that you can run kubectl version

O/p:
[ikhan@mn1 ~]$ sudo usermod -aG docker $USER && newgrp docker
[ikhan@mn1 ~]$ minikube start
* minikube v1.37.0 on Centos 9
* Using the docker driver based on existing profile

X The requested memory allocation of 3072MiB does not leave room for system overhead (total system memory: 3622MiB). You may face stability issues.
* Suggestion: Start minikube with less memory allocated: 'minikube start --memory=3072mb'

* Starting "minikube" primary control-plane node in "minikube" cluster
* Pulling base image v0.0.48 ...
* Updating the running docker "minikube" container ...
* Preparing Kubernetes v1.34.0 on Docker 28.4.0 ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: default-storageclass, storage-provisioner
* kubectl not found. If you need it, try: 'minikube kubectl -- get pods -A'
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
[ikhan@mn1 ~]$ minikube status
minikube
type: Control Plane
host: Running
kubelet: Running
apiserver: Running
kubeconfig: Configured

Expose your minikube container IP to external world.
Easiest / recommended for short-lived access: kubectl port-forward (bind to host IP)

Forward pod port 3000 to host port 31515 and bind to all interfaces (so other LAN hosts can reach):

# forward directly to pod:
kubectl port-forward --address 0.0.0.0 pod/client-pod 31515:3000

# Or forward the Service port (maps local 31515 -> svc port 3050 -> target 3000)
kubectl port-forward --address 0.0.0.0 svc/client-node-port 31515:3050


Leave that command running (or run it under nohup/systemd).

